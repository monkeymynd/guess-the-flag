{"version":3,"sources":["StyledButton.js","FlagChoices.js","FlagAnswer.js","FlagQuestion.js","CountryGame.js","serviceWorker.js","index.js"],"names":["StyledButton","text","onClick","type","style","backgroundColor","borderRadius","border","color","padding","textAlign","textDecoration","fontSize","FlagChoices","props","options","handleChange","handleSubmit","inputs","map","opt","key","id","value","checked","onChange","name","className","onSubmit","FlagAnswer","correct","answer","onNext","QuestionStates","FlagQuestion","state","userChoice","undefined","bind","e","this","setState","Number","target","preventDefault","onGuess","flag","questionState","answerText","opts","output","src","alt","Component","defaultProps","CountryGame","countries","correctOption","nextQuestion","fetch","then","resp","json","Math","floor","random","length","_getOptions","catch","console","warn","tries","option","indexOf","push","shuffle","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.50a63005.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst StyledButton = ({text, onClick, type}) => (\r\n  <button\r\n    type={type || 'button'}\r\n    onClick={onClick}\r\n    style={{\r\n      backgroundColor: \"#6b93d6\",\r\n      borderRadius: \"4px\",\r\n      border: \"none\",\r\n      color: \"white\",\r\n      padding: \"4px 10px\",\r\n      textAlign: \"center\",\r\n      textDecoration: \"none\",\r\n      fontSize: \"1em\",\r\n    }}\r\n  >\r\n    {text}\r\n  </button>\r\n);\r\n\r\nexport default StyledButton;","import React from 'react';\r\nimport StyledButton from './StyledButton';\r\nimport './FlagChoices.css';\r\n\r\nconst FlagChoices =  props => {\r\n  let options = props.options || []\r\n  const {handleChange, handleSubmit} = props;\r\n  let inputs = options.map(opt => (\r\n    <label key={opt.id}>\r\n      <input type=\"radio\"\r\n             value={opt.id}\r\n             checked={opt.checked}\r\n             onChange={handleChange}\r\n             name=\"flag-choice\" />\r\n      {opt.name}\r\n    </label>\r\n  ));\r\n\r\n  return (\r\n    <form className=\"flag-form\" onSubmit={handleSubmit}>\r\n      {inputs}\r\n      <StyledButton text=\"GUESS\" type=\"submit\"/>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default FlagChoices;","import React from 'react';\r\nimport StyledButton from './StyledButton';\r\nimport './FlagAnswer.css';\r\n\r\nconst FlagAnswer = ({correct, answer, onNext}) => (\r\n  <div className='flag-answer'>\r\n    {correct ?\r\n      `Correct!: ${answer}` :\r\n      `Incorrect! Correct Answer: ${answer}`}\r\n    <StyledButton text=\"NEXT\" onClick={onNext} />\r\n  </div>\r\n);\r\n\r\nexport default FlagAnswer;","import React, {Component} from 'react';\r\nimport FlagChoices from './FlagChoices'\r\nimport FlagAnswer from './FlagAnswer';\r\nimport './FlagQuestion.css';\r\n\r\nconst QuestionStates = {\r\n  QUESTION: 1,\r\n  ANSWER_WRONG: 2,\r\n  ANSWER_CORRECT: 3\r\n};\r\n\r\n\r\nclass FlagQuestion extends Component {\r\n  static defaultProps = {\r\n    options: []\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userChoice: undefined,\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({userChoice: Number(e.target.value)});\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.onGuess(this.state.userChoice);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      flag,\r\n      questionState,\r\n      options,\r\n      answerText,\r\n      onNext\r\n    } = this.props;\r\n    const {userChoice} = this.state;\r\n    let opts = options.map(opt => ({\r\n      ...opt,\r\n      checked: userChoice === opt.id\r\n    }));\r\n    let output = questionState === QuestionStates.QUESTION ?\r\n      (<FlagChoices handleChange={this.handleChange}\r\n                   handleSubmit={this.handleSubmit}\r\n                   options={opts} />) :\r\n      (<FlagAnswer\r\n        correct={questionState === QuestionStates.ANSWER_CORRECT}\r\n        answer={answerText}\r\n        onNext={onNext} />);\r\n\r\n    return (\r\n      <div>\r\n        {output}\r\n        <div className=\"flag-container\">\r\n        <img\r\n           className=\"flag-img\"\r\n           src={flag}\r\n           alt=\"Guess the flag\"\r\n         />\r\n         </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FlagQuestion;\r\nexport { QuestionStates };","import React, {Component} from 'react';\nimport FlagQuestion, {QuestionStates} from './FlagQuestion.js';\nimport shuffle from 'shuffle-array';\n\nclass CountryGame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      countries: [],\n      options: [],\n      correctOption: undefined,\n      questionState: undefined,\n    }\n\n    this.onGuess = this.onGuess.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(resp => resp.json())\n      .then(countries => {\n        const correctOption = Math.floor(Math.random() * countries.length);\n        const options = this._getOptions(correctOption, countries);\n        this.setState({\n          countries,\n          correctOption,\n          options,\n          questionState: QuestionStates.QUESTION,\n        });\n      })\n      .catch(console.warn)\n  }\n\n  onGuess(answer) {\n    const {correctOption} = this.state;\n    let questionState = answer === correctOption ?\n                        QuestionStates.ANSWER_CORRECT :\n                        QuestionStates.ANSWER_WRONG;\n    this.setState({questionState});\n  }\n\n  nextQuestion() {\n    const {countries} = this.state;\n    const correctOption = Math.floor(Math.random() * countries.length);\n    const options = this._getOptions(correctOption, countries);\n    this.setState({\n      correctOption,\n      options,\n      questionState: QuestionStates.QUESTION\n    });\n  }\n\n  _getOptions(correctOption, countries) {\n    let options = [correctOption];\n    let tries = 0;\n    while (options.length < 4 && tries < 15) {\n      let option = Math.floor(Math.random() * countries.length);\n      if (options.indexOf(option) === -1 ) {\n        options.push(option);\n      } else {\n        tries++;\n      }\n    }\n    return shuffle(options);\n  }\n\n  render() {\n    let {\n      countries,\n      correctOption,\n      options,\n      questionState\n    } = this.state;\n    let output = <div>Loading...</div>;\n    if (correctOption !== undefined) {\n      const {flag, name} = countries[correctOption];\n      let opts = options.map(opt => {\n        return {\n          id: opt,\n          name: countries[opt].name\n        };\n      });\n      output = (\n        <FlagQuestion\n          answerText={name}\n          onGuess={this.onGuess}\n          onNext={this.nextQuestion}\n          options={opts}\n          questionState={questionState}\n          flag={flag}/>\n      );\n    }\n    return (\n      <div style={{marginTop: '15px'}}>\n        {output}\n      </div>\n    );\n  }\n}\n\nexport default CountryGame;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CountryGame from './CountryGame';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CountryGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}